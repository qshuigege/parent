package com.example.demo.test.socket;

import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.DatagramSocket;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

public class Test {

    public static void main(String[] args) throws IOException {
        /*try {
            UDPSocketClient instance = UDPSocketClient.getInstanceReusable("192.168.50.232", 2000);
            //UDPSocketClient instance = UDPSocketClient.getInstanceReusable("localhost", 2300);


                byte t = 03;
            byte[] mess=new byte[3];
            mess[0]= (byte)1;
            mess[1]= (byte) 77 >> 8;
            mess[2]= (byte)77;
                UDPPacket udpPacket = new UDPPacket();
                byte[] sendData = udpPacket.getSendData(t, mess);
                //sendData = new byte[]{0x44, 0x52,0x00,0x00,0x2b,0x03,0x00,0x00,0x00,0x03,0x01,0x00,0x19,(byte)0xe1};
                instance.send(sendData);

                instance.close();

        }catch (Exception e){
            e.printStackTrace();
        }*/
        DatagramSocket socket = new DatagramSocket();
        byte[] data1 = new byte[]{0x44,0x52, 0x00,0x00, 0x2b, 0x03, 0x00,0x00, 0x00,0x03, 0x01,0x03,(byte)0xe5, (byte)0xb0};//0x03e6=998
        //byte[] data2 = new byte[]{0x44,0x52, 0x00,0x00, 0x2b, 0x03, 0x00,0x00, 0x00,0x03, 0x02,0x03,(byte)0xe6, (byte)0xb2};

        /*DatagramPacket packet1 = new DatagramPacket(data1, data1.length, InetAddress.getByName("192.168.50.232"), 2300);
        //DatagramPacket packet2 = new DatagramPacket(data2, data2.length, InetAddress.getByName("192.168.50.232"), 2300);

        socket.send(packet1);
        //socket.send(packet2);


        *//*byte[] dir1 = new byte[]{0x44,0x52, 0x00,0x00, 0x00, 0x05, 0x00,0x00, 0x00,0x04, (byte)0x70,0x00,0x04,0x00, 0x13};
        byte[] dir2 = new byte[]{0x44,0x52, 0x00,0x00, 0x00, 0x05, 0x00,0x00, 0x00,0x04, (byte)0xa0,0x00,0x04,0x00, 0x43};
        byte[] dir3 = new byte[]{0x44,0x52, 0x00,0x00, 0x00, 0x05, 0x00,0x00, 0x00,0x04, (byte)0xa8,0x00,0x04,0x00, 0x4b};
        byte[] dir4 = new byte[]{0x44,0x52, 0x00,0x00, 0x00, 0x05, 0x00,0x00, 0x00,0x04, (byte)0xaa,0x00,0x04,0x00, 0x4d};

        DatagramPacket dirPac = new DatagramPacket(dir1, dir1.length, InetAddress.getByName("192.168.50.232"), 2300);
        socket.send(dirPac);*//*

        *//*byte[] b = new byte[]{0x44,0x52,0x00,0x00,0x2b,0x03,0x00,0x00,0x00,(byte) 0xf0,0x01,0x00,0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,(byte) 0xc9};
        System.out.println(b.length);
        DatagramPacket packet1 = new DatagramPacket(b, b.length, InetAddress.getByName("192.168.50.232"), 2300);
        socket.send(packet1);*//*


        socket.close();*/

        int respDataLen = 11;
        String ip = "192.168.50.232";
        Integer port = 2000;
        Socket tcpSocket = new Socket(ip, port);
        tcpSocket.setSoTimeout(500);
        //tcpSocket.setKeepAlive(false);
        //tcpSocket.setTcpNoDelay(false);
        OutputStream out = tcpSocket.getOutputStream();
        InputStream in = tcpSocket.getInputStream();
        out.write(data1);
        out.flush();
        //tcpSocket.shutdownOutput();
        //List<Integer> response = new ArrayList<>();
        //int temp = 1;
        /*for (int i = 0; i < respDataLen; i++) {
            //temp = ;
            in.read();in.skip(11);
            //System.out.println("step1-->"+(i+1)+"-->"+Integer.toHexString(temp));
            //response.add(temp);
        }*/
        //long skip = in.skip(11);
        //System.out.println(skip);

        List<Object> content = new ArrayList<>();
        byte[] buff = new byte[10];
        int totalReadBytes = 0;
        int curReadBytes = 0;
        while (true) {
            try {
                curReadBytes = in.read(buff);
                if (curReadBytes == -1) {
                    System.out.println("对方输出流已关闭！");
                    break;
                }
            }catch (SocketTimeoutException e){
                System.out.println("读取输入流超时！");
                break;
            }

            System.out.println("本次读到的长度-->"+curReadBytes);
            totalReadBytes += curReadBytes;
            byte[] temp = new byte[curReadBytes];
            System.arraycopy(buff, 0, temp, 0, curReadBytes);
            content.add(temp);

        }
        System.out.println("总长度-->"+totalReadBytes);

        //int pos;
        byte[] retVal = new byte[totalReadBytes];

        for (int i = 0; i < content.size(); i++) {
            byte[] t = (byte[])content.get(i);
            //pos = ;
            //System.out.println(t[j]);
            System.arraycopy(t, 0, retVal, buff.length*i, t.length);
        }
        //System.out.println();
        for (byte b : retVal) {
            System.out.println(Integer.toHexString(Byte.toUnsignedInt(b)));
        }


        //in.reset();
        /*byte[] buff = new byte[response.size()];
        for (int i = 0; i < buff.length; i++) {
            buff[i] = response.get(i).byteValue();
        }
        for (byte b : buff) {
            System.out.print(Integer.toHexString(b));
        }
        System.out.print("\n");*/

        tcpSocket.shutdownOutput();
        /*temp = 1;
        while (temp >-1){
            temp = in.read();
            System.out.println("step2-->"+Integer.toHexString(temp));
        }*/
        tcpSocket.shutdownInput();
        /*temp = 1;
        while (temp > -1){
            temp = in.read();
            System.out.println("step3-->"+Integer.toHexString(temp));
        }*/
        in.close();
        out.close();
        tcpSocket.close();
    }

}
